@page "/addproduct"

@inject NavigationManager NavigationManager
@inject IAddProductUseCase AddProductUseCase
@inject IJSRuntime js

@attribute [Authorize(Policy = "Inventory")]

<h3>Add Product</h3>
<br/>

    
            <EditForm Model="product" OnValidSubmit="SaveProduct">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>
    <table class="table">
    <thead>
        <tr>
            <div class="form-group">
                <label for="name">Product Name</label>
                <InputText 
                id="name" 
                @bind-Value="product.ProductName"
                class="form-control">
            </InputText>
            </div>

            <div class="form-group">
                <label for="quantity">Quantity</label>
                <InputNumber 
                id="quantity" 
                @bind-Value="product.Quantity"
                class="form-control">
             </InputNumber>
            </div>

            <div class="form-group">
                <label for="price">Price</label>
                <InputNumber 
                id="price" 
                @bind-Value="product.Price"
                class="form-control">
                </InputNumber>
            </div>
    
            <br/>
             <div class="btn-group btn-group-sm" role="group" aria-label="Small button group">
                 <button type="submit" class="btn btn-primary">Save</button>
                 <button type="button" class="btn btn-primary" @onclick="Cancel">Cancel</button>
            </div>
            
        </tr>
        <tr>
            <div class="form-group">
                <label for="Case">Case</label>
                <InputText id="Case"
                           @bind-Value="product.Case"
                           class="form-control">
                </InputText>
            </div>

            <div class="form-group">
                <label for="CPU">CPU</label>
                <InputText id="CPU"
                             @bind-Value="product.Cpu"
                             class="form-control">
                </InputText>
            </div>

            <div class="form-group">
                <label for="Motherboard">Motherboard</label>
                <InputText id="Motherboard"
                             @bind-Value="product.Motherboard"
                             class="form-control">
                </InputText>
            </div>
            <div class="form-group">
                <label for="GraphicCard">Graphic Card</label>
                <InputText id="GraphicCard"
                             @bind-Value="product.GraphicCard"
                             class="form-control">
                </InputText>
            </div>
            <div class="form-group">
                <label for="Memmory">Memmory</label>
                <InputText id="Memmory"
                           @bind-Value="product.Memmory"
                           class="form-control">
                </InputText>
            </div>
            <div class="form-group">
                <label for="Hdd">Hdd</label>
                <InputText id="Hdd"
                           @bind-Value="product.Hdd"
                           class="form-control">
                </InputText>
            </div>
            <div class="form-group">
                <label for="PowerSupply">PowerSupply</label>
                <InputText id="PowerSupply"
                           @bind-Value="product.PowerSupply"
                           class="form-control">
                </InputText>
            </div>
        </tr>
    </thead>
</table>
</EditForm>


@code {
    private Product product = new Product();

    private async Task SaveProduct()
    {
        await AddProductUseCase.ExecuteAsync(product);
        NavigationManager.NavigateTo("/products");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/products");
    }

    protected async override Task OnAfterRenderAsync(bool firstrender)
    {
        if (firstrender)
        {
            await js.InvokeVoidAsync("focusById", "name");
        }
    }
}