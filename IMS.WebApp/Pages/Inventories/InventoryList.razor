@page "/inventories"
@using static IMS.WebApp.Controls.Common.AutoCompleteComponent;
@inject NavigationManager NavigationManager
@inject IInventoryRepository InventoryRepository
@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase

<h3>Inventory List</h3>
<br/>
<SearchInventoryComponent OnSearchInventory="OnInventorySearch"> 
</SearchInventoryComponent>
<br/>
<button type="button" class="btn btn-primary" @onclick="AddInventory"><i class="bi bi-plus-square" style="padding:0 0.5rem 0 0;"></i>Add Inventory</button>
<br/>
<p>
<IMS.WebApp.Controls.Common.AutoCompleteComponent
    Label="Inventory"
    SearchFunction="SearchInventory"
    OnItemSelected="OnItemSelected">
</IMS.WebApp.Controls.Common.AutoCompleteComponent>
<br/>
@selectedItem?.Name
</p>
<InventoryListComponent SearchTerm="@searchTerm" ListInventories="@items"></InventoryListComponent>
<PageComponent CurrentPage="OnCurrentPageChange"></PageComponent>


@code {
    private ItemViewModel? selectedItem = null;

    private List<Inventory> items { get; set; } = new();

    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await OnCurrentPageChange(0);
    }

    private void OnInventorySearch(string searchTerm)
    {
        this.searchTerm = searchTerm;
    }

    private void AddInventory()
    {
        NavigationManager.NavigateTo("/addinventory");
    }

    private async Task OnCurrentPageChange(int currentPage)
    {
        var result = InventoryRepository.GetPageByNameAsync(string.Empty, currentPage);

        await result;

        if (result.IsCompleted)

        {
            items = result.Result.ToList();
            await InvokeAsync(StateHasChanged);

        }
    }

    private List<ItemViewModel>? SearchInventory(string name)
    {
        var list = ViewInventoriesByNameUseCase.ExecuteAsync(name).GetAwaiter().GetResult();
        if (list == null) return null;

        return list.Select(x => new ItemViewModel { Id = x.InventoryId, Name = x.InventoryName })?.ToList();
    }

    private void OnItemSelected(ItemViewModel item)
    {
        this.selectedItem = item; 
    }

}
